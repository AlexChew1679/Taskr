1. create a migration file of
  rails g migration create_tasks.rb
2. create model task.rb
3. create tasks_controller.rb
4. create tasks folder at view
5. put def new at tasks_controller
                          def new
                            @task = Task.new
                          end


 and   create new.html.erb

                    <% if @task.errors.any? %>
                    <h4> Oopps u fuck up! </h4>
                      <ul>
                      <% @task.errors.full_messages.each do |msg| %>
                      <li><%= msg %></li>
                      <%end%>
                      </ul>
                    <%end%>

                    <%= simple_form_for @task do |f| %>
                      <%= f.input :content %>
                      <%= f.button :submit %>

                    <% end %
6. in order to show Flash Message, paste this
                      <% flash.each do |name,msg| %>
                        <%= msg %>
                  at application.html.erb at body

7. put at tasks_controller.rb  POST
                      def create
                        @task = Task.new(tasks_params)
                        if @task.save
                          flash[:notice] = "Task was succesfully created"
                          redirect_to task_path(@task)
                        else
                          render 'new'
                        end
                      end

8. create edit.html.erb at view/tasks , copy n paste from new.html.erb

                    <h1> Edit Task </h1>

                    <% if @task.errors.any? %>
                    <h4> Oopps u fuck up! </h4>
                      <ul>
                      <% @task.errors.full_messages.each do |msg| %>
                      <li><%= msg %></li>
                      <%end%>
                      </ul>
                    <%end%>

                    <%= simple_form_for @task do |f| %>
                      <%= f.input :content %>
                      <%= f.button :submit %>

                    <% end %>

at task controller :
                      def edit
                          @task = Task.find(params[:id])


9.  after edit, the content is updated  , then paste this at tasks_controller

                      def update
                          @task = Task.find(params[:id])
                          if @task.update(tasks_params)
                            flash[:notice] = "Task was succesfully updatedd"
                            redirect_to task_path(@task)
                          else
                            render 'edit'
                          end
                      end

10. put this at tasks_controller

                          def show
                            @task = Task.find(params[:id])
                          end

  create a show.html.erb  ( show only 1 task according to id)

                        <h1> Showing Task </h1>

                        <strong> Content: </strong> <%= @task.content %>
                        <%= link_to 'Go Back to New Task' , new_task_path %>|
                        <%= link_to 'Go Back to Edit Task' , edit_task_path(@task) %>
                        <%= link_to 'Show all Task' , tasks_path %>|

11.  put this at tasks_controller
                            def index
                              @tasks = Task.all
                            end

n create a  index.html.erb  ( show all Task )

                  <h1> All Task </h1>

                  <%=link_to 'New Task', new_task_path %>
                  </br>

                  <table>
                    <tr>
                  <th> Content </th>
                    </tr>

                    <% @tasks.each do |task|  %>
                        <tr>
                          <td><%= task.content %></td>
                          <td><%= link_to 'Show', task_path(task) %> </td>
                          <td><%= link_to 'Edit', edit_task_path(task) %> </td>
                             DESTROY PUT HERE :)
                        </tr>
                        <%end%>
                  </table>

12.  paste this at tasks_controller.rb
                      def destroy
                        #@task = Task.find(params[:id])
                        @task.destroy
                        flash[:notice] = "Task was succesfully deleted"
                        redirect_to tasks_path
                      end


                      paste this inside <tr> below link_to 'Edit'
                      <td><%= link_to 'Delete', task_path(task), method: :delete, data: {confirm: "Are you Sure?"} %> </td>


13 . clean up the code

create _form.html.erb

cut code from new.html.erb and edit.html.erb  n paste it at _form.html.erb , then at new.html.erb paste  and edit.html.erb

                          <%= render 'form' %>

clean up tasks_controller

since   edit update show destroy, have the same line of code, paste this at top of task controller

                      before_action :set_task, only: [:edit, :update, :show, :destroy]

paste this at the lower below private

                            def set_task
                                @task = Task.find(params[:id])
                              end


14. now the Task dont have a USER ID, so everyone can sign in and the task is not assigned to that User, so create USER ID by
                                  rails g migration add_user_id_to_tasks user_id:integer

                                  set model : user.rb and task.rb

                                  user.rb   : has_many :tasks, dependent: :destroy
                                  task.rb   : belongs_to :user


15.. 1 major problem, now u can go to localhost:3000/tasks/new with or without signin in... means outsider can access to list of Tasks , big problem, so what u do?

go to task controller , change it to this

                            def index
                              @tasks = current_user.tasks
                            end

                            def update
                                if @task.update(tasks_params)
                                  flash[:notice] = "Task was succesfully updatedd"
                                  redirect_to task_path(@task)
                                else
                                  render 'edit'
                                end
                            end

    add at top of task controller
                              before_action :authenticate_user!   --- this come from devise gem


  16 .. now the task dont have the status STATE ..


  run $rails g migration add_state_to_tasks state:string

  class AddStateToTasks < ActiveRecord::Migration[5.0]
    def change
      add_column :tasks, :state, :string, default: 'to_do'    ##default: 'to_do' we add it
    end
  end


                put this at _form.html.erb    => <%= f.input :state %>

                put this at show.html.erb => <strong> Status: </strong> <%= @task.state %>

                at index.html.erb , copy the current code and paste 2 more times below, 1 todo 2 doing 3 done , see the file and is self-explanatory

  go to tasks controller at index method

                              def index
                                @to_do = current_user.tasks.where(state: 'to_do')
                                @doing = current_user.tasks.where(state: 'doing')
                                @done = current_user.tasks.where(state: 'done')
                              end

      ensure at index.html.erb must have this matching

        <% @to_do.each do |task|  %>
          <% @doing.each do |task|  %>
            <% @done.each do |task|  %>
